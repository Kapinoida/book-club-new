// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String    @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  created_at   DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  username       String?   @unique
  password       String?
  isAdmin        Boolean   @default(false)
  bio            String?   @db.Text // User biography
  favoriteGenres String?   // Comma-separated list of favorite genres
  location       String?   // User location (optional)
  website        String?   // Personal website or social link
  currentStreak  Int       @default(0) // Current consecutive weeks with activity
  longestStreak  Int       @default(0) // Longest streak ever achieved
  lastActiveWeek String?   // ISO week string (e.g., "2024-W42")
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  accounts       Account[]
  sessions       Session[]
  readingProgress ReadingProgress[]
  comments       Comment[]
  reviews        Review[]
  votes          Vote[]
  reactions      Reaction[]
  badges         UserBadge[]

  @@map("users")
}

model Book {
  id          String   @id @default(cuid())
  title       String
  author      String
  coverImage  String?
  description String?  @db.Text
  readMonth   DateTime?
  googleBooksId String?
  status      BookStatus @default(DRAFT)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  readingProgress ReadingProgress[]
  discussionQuestions DiscussionQuestion[]
  comments    Comment[]
  reviews     Review[]
  pollCandidates PollCandidate[]

  @@index([readMonth])
  @@index([status])
  @@map("books")
}

enum BookStatus {
  DRAFT
  POLL_CANDIDATE
  SCHEDULED
  CURRENT
  ARCHIVED
}

model ReadingProgress {
  id         String   @id @default(cuid())
  userId     String
  bookId     String
  progress   Int      // Page number or percentage
  isFinished Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  book       Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
  @@index([userId])
  @@index([bookId])
  @@index([userId, isFinished]) // For filtering user's finished books
  @@index([isFinished])
  @@map("reading_progress")
}

model DiscussionQuestion {
  id         String   @id @default(cuid())
  bookId     String
  question   String   @db.Text
  breakpoint Int      // Page number or percentage where this question becomes relevant
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  book       Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  comments   Comment[]

  @@index([bookId])
  @@map("discussion_questions")
}

model Comment {
  id         String   @id @default(cuid())
  content    String   @db.Text
  userId     String
  bookId     String
  questionId String?
  parentId   String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  flagged    Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  book       Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  question   DiscussionQuestion? @relation(fields: [questionId], references: [id], onDelete: SetNull)
  parent     Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    Comment[] @relation("CommentToComment")
  reactions  Reaction[]

  @@index([userId])
  @@index([bookId])
  @@index([questionId])
  @@index([parentId])
  @@index([questionId, parentId]) // For fetching top-level comments by question
  @@index([created_at])
  @@map("comments")
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  bookId     String
  rating     Int      // 1-5 stars
  review     String?  @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  book       Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  reactions  Reaction[]

  @@unique([userId, bookId])
  @@index([userId])
  @@index([bookId])
  @@index([rating])
  @@map("reviews")
}

enum ReactionType {
  LIKE
  INSIGHTFUL
  HELPFUL
  THOUGHTFUL
}

model Reaction {
  id         String       @id @default(cuid())
  userId     String
  commentId  String?
  reviewId   String?
  type       ReactionType
  created_at DateTime     @default(now())
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment    Comment?     @relation(fields: [commentId], references: [id], onDelete: Cascade)
  review     Review?      @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId, type])
  @@unique([userId, reviewId, type])
  @@index([userId])
  @@index([commentId])
  @@index([reviewId])
  @@index([type])
  @@map("reactions")
}

model Poll {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  startDate   DateTime
  endDate     DateTime
  forMonth    DateTime // The reading month this poll is for
  isActive    Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  candidates  PollCandidate[]
  votes       Vote[]

  @@index([isActive])
  @@index([forMonth])
  @@map("polls")
}

model PollCandidate {
  id         String   @id @default(cuid())
  pollId     String
  bookId     String
  rank       Int?     // Final ranking after poll closes
  voteCount  Int      @default(0)
  created_at DateTime @default(now())
  poll       Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  book       Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([pollId, bookId])
  @@index([pollId])
  @@index([bookId])
  @@map("poll_candidates")
}

model Vote {
  id         String   @id @default(cuid())
  userId     String
  pollId     String
  bookId     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  poll       Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)

  @@unique([userId, pollId])
  @@index([pollId])
  @@index([userId])
  @@index([bookId])
  @@map("votes")
}

enum BadgeType {
  FIRST_BOOK
  FIVE_BOOKS
  TEN_BOOKS
  BOOKWORM // 25 books
  AVID_READER // 50 books
  FIRST_REVIEW
  TOP_REVIEWER // 10 reviews
  DISCUSSION_STARTER // First comment
  ACTIVE_PARTICIPANT // 25 comments
  COMMUNITY_LEADER // 100 comments
  HELPFUL_MEMBER // 10 helpful reactions
  INSIGHTFUL_CONTRIBUTOR // 10 insightful reactions
  EARLY_ADOPTER // Joined in first month
  STREAK_STARTER // 7 day streak
  DEDICATED_READER // 30 day streak
  READING_CHAMPION // 100 day streak
}

model Badge {
  id          String     @id @default(cuid())
  type        BadgeType  @unique
  name        String
  description String
  icon        String     // Emoji or icon identifier
  color       String     // Color code for badge display
  tier        Int        @default(1) // 1=Bronze, 2=Silver, 3=Gold, 4=Platinum
  created_at  DateTime   @default(now())
  userBadges  UserBadge[]

  @@map("badges")
}

model UserBadge {
  id         String   @id @default(cuid())
  userId     String
  badgeId    String
  awarded_at DateTime @default(now())
  isPinned   Boolean  @default(false) // User can pin one badge to display
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge      Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@index([userId])
  @@index([badgeId])
  @@index([userId, isPinned]) // For quickly finding pinned badges
  @@map("user_badges")
}
